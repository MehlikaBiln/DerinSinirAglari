# MNIST - LeNet5 Model Eğitimi
# Hazırlayan: ChatGPT ile

# Gerekli kütüphaneleri yükle
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv2D, AveragePooling2D, Flatten, Dense
from keras.utils import to_categorical
import matplotlib.pyplot as plt

# 1. MNIST Datasetini yükle
(X_train, y_train), (X_test, y_test) = mnist.load_data()

print('Eğitim verisi boyutu:', X_train.shape)
print('Test verisi boyutu:', X_test.shape)

# 2. Verileri hazırla
# Şekillendirme (reshape)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# Normalize et (0-255 aralığını 0-1 aralığına çek)
X_train = X_train.astype('float32') / 255
X_test = X_test.astype('float32') / 255

# Label'ları One-hot encoding yap
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# 3. LeNet5 modelini oluştur
model = Sequential()

model.add(Conv2D(6, kernel_size=(5,5), activation='tanh', input_shape=(28,28,1), padding='same'))
model.add(AveragePooling2D(pool_size=(2,2)))

model.add(Conv2D(16, kernel_size=(5,5), activation='tanh'))
model.add(AveragePooling2D(pool_size=(2,2)))

model.add(Flatten())
model.add(Dense(120, activation='tanh'))
model.add(Dense(84, activation='tanh'))
model.add(Dense(10, activation='softmax'))


# Model özetini yazdır
model.summary()

# 4. Modeli compile et
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 5. Modeli eğit (fit)
history = model.fit(X_train, y_train, epochs=20, batch_size=128, validation_split=0.2, verbose=1)

# 6. Test seti üzerinde değerlendirme yap
test_loss, test_accuracy = model.evaluate(X_test, y_test, verbose=0)
print('Test Loss:', test_loss)
print('Test Accuracy:', test_accuracy)

# 7. Eğitim ve doğrulama grafiği çiz
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Eğitim Doğruluğu')
plt.plot(history.history['val_accuracy'], label='Doğrulama Doğruluğu')
plt.xlabel('Epoch')
plt.ylabel('Doğruluk')
plt.legend()
plt.title('Eğitim vs Doğrulama Doğruluğu')

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Eğitim Kaybı')
plt.plot(history.history['val_loss'], label='Doğrulama Kaybı')
plt.xlabel('Epoch')
plt.ylabel('Kayıp')
plt.legend()
plt.title('Eğitim vs Doğrulama Kaybı')

plt.tight_layout()
plt.show()
